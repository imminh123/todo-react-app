{"version":3,"sources":["const.ts","components/dropdown/index.tsx","components/calendar/index.tsx","components/button/index.tsx","components/input/index.tsx","components/alert/index.tsx","services/storage.ts","screens/list-todo/todo-item/index.tsx","screens/list-todo/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["PRIORITY","value","label","PRIORITY_LIST","TODO_STORAGE","Dropdown","className","onChange","data","useState","isActive","setIsActive","onClick","filter","item","getValue","type","name","map","handleSelectItem","Calendar","Button","Input","placeholder","e","target","Alert","message","save","key","localStorage","setItem","JSON","stringify","get","getItem","parse","TodoItem","id","description","dueDate","priority","onUpdate","onChecked","active","setActive","taskName","setTaskName","taskDescription","setTaskDescription","updateDueDate","setUpdateDueDate","updatePriority","setUpdatePriority","Array","currentStorage","setCurrentStorage","handleRemoveTodo","filterTodos","remove","useEffect","tempStorage","checked","rows","updatedStorage","handleUpdateValue","ListTodo","setDueDate","setPriority","displayTodos","setDisplayTodos","selectedItem","setSelectedItem","alertType","setAlertType","alertMessage","setAlertMessage","isShowAlert","setIsShowAlert","isShowingBulkActions","setIsShowingBulkActions","handleOnTodoUpdate","getCurrentStorage","setTimeout","length","date","Date","year","getFullYear","month","getMonth","day","getDate","parsedMonth","parsedDate","handleBulkDelete","includes","removeBulk","todoItem","uuidv4","handleAddTodo","searchValue","toLowerCase","filteredTodo","handleSearchTodo","filteredSeletedItem","handleOnCheckedTodo","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.308d0a57.chunk.js","sourcesContent":["export const PRIORITY = {\n    LOW: {\n        value: 'low',\n        label: 'Low'\n    },\n    NORMAL: {\n        value: 'normal',\n        label: 'Normal'\n    },\n    HIGH: {\n        value: 'high',\n        label: 'High'\n    }\n}\n\nexport const PRIORITY_LIST = [{\n    value: 'low',\n    label: 'Low'\n}, {\n    value: 'normal',\n    label: 'Normal'\n},{\n    value: 'high',\n    label: 'High'\n}]\n\nexport interface TODO_ITEM {\n    id: string;\n    taskName: string;\n    taskDescription: string;\n    priority: object;\n    dueDate: string;\n}\n\nexport interface RenderItem {\n    value: string;\n    label: string;\n  }\n\nexport const TODO_STORAGE = 'todo_storage';","import React, { useState } from 'react';\nimport { PRIORITY_LIST, RenderItem } from '../../const';\nimport './style.scss';\n\ninterface Props {\n  className?: string;\n  onChange: (value: RenderItem) => void;\n  data: Array<RenderItem>;\n  value: string;\n}\n\n\nexport const Dropdown = ({className, onChange, data, value} : Props) => {\n  const [isActive, setIsActive] = useState(false);\n  \n  const handleSelectItem = (item : RenderItem) => {\n    onChange(item)\n    setIsActive(false);\n  }\n\n  const getValue = (value: string) => {\n    return PRIORITY_LIST.filter(item => item.value === value);\n  }\n\n  return (\n    <div className={`dropdownContainer ${className}`}>\n      <div className={`${isActive && \"active\"} dropdown`}>\n        <span className=\"selLabel\" onClick={() => setIsActive(!isActive)}>{getValue(value)[0].label}</span>\n        <input type=\"hidden\" name=\"cd-dropdown\" />\n        <ul className=\"dropdown-list\">\n          {\n            data && data.map(item => (\n              <li onClick={() => handleSelectItem(item)} key={item.value}>\n                <span>{item.label}</span>\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n    </div>\n  );\n}","import React, { useState } from 'react';\nimport './style.scss';\n\ninterface Props {\n  onChange: (value: any) => void;\n  value?: any;\n}\n\nexport const Calendar = ({onChange, value} : Props) => {\n  return (\n    <input type=\"date\" className=\"calendar\" value={value} onChange={onChange}/>\n  );\n}","import React from 'react';\nimport './style.scss';\n\ninterface Props {\n    type?: 'danger' | 'primary' | 'info';\n    className?: string;\n    onClick?: () => void;\n    label: string;\n}\n\nexport const Button = ({type, className, onClick, label} : Props) => {\n  return (\n    <button className={`buttonContainer ${className} ${type}`} onClick={onClick}>{label}</button>\n  );\n}","import React, { useState } from 'react';\nimport './style.scss';\n\ninterface Props {\n    placeholder?: string;\n    className?: string;\n    onChange?: (value : string) => void;\n    value?: string;\n}\n\nexport const Input = ({placeholder, className, onChange, value} : Props) => {\n\n  return (\n    <input className={`input ${className}`}placeholder={placeholder} value={value} onChange={(e) => onChange && onChange(e.target.value)}/>\n  );\n}","import React from 'react';\nimport './style.scss';\n\ninterface Props {\n    type: string;\n    message: string;\n}\n\nexport const Alert = ({type, message} : Props) => {\n  return (\n    <div className={`alertContainer ${type}`}>\n        <p>{message}</p>\n    </div>\n  );\n}","export const save = (key: string, item: any) => {\n    return localStorage.setItem(key, JSON.stringify(item));\n}\n\nexport const get = (key: string) => {\n    const data = localStorage.getItem(key);\n    if(data) {\n        return JSON.parse(data);\n    }\n    return null;\n}\n\nexport const remove = (key: string, id: string) => {\n    const data = localStorage.getItem(key);\n    if(data) {\n        const parsedData = JSON.parse(data);\n        const filterTodos = parsedData.filter((item: any) => item.id !== id);\n        localStorage.setItem(key, JSON.stringify(filterTodos));\n        return true;\n    }\n    return false\n}\n\nexport const removeBulk = (key: string, id: Array<string>) => {\n    const data = localStorage.getItem(key);\n    if(data) {\n        const parsedData = JSON.parse(data);\n        const filterTodos = parsedData.filter((item: any) => {\n            return !id.includes(item.id)\n        });\n        localStorage.setItem(key, JSON.stringify(filterTodos));\n        return true;\n    }\n    return false\n}","import React, { useEffect, useState } from 'react';\nimport { Button } from '../../../components/button';\nimport { Calendar } from '../../../components/calendar';\nimport { Dropdown } from '../../../components/dropdown';\nimport { Input } from '../../../components/input';\nimport { PRIORITY_LIST, RenderItem, TODO_ITEM, TODO_STORAGE } from '../../../const';\nimport { save, remove, get } from '../../../services/storage'\nimport './style.scss';\n\ninterface Props {\n    id: string;\n    label: string;\n    description: string;\n    dueDate: string;\n    priority: any;\n    onUpdate: (type?: string) => void;\n    onChecked: (id: string, checked: boolean) => void;\n}\n\nexport const TodoItem = ({id, label, description, dueDate, priority, onUpdate, onChecked}: Props) => {\n    const [active, setActive] = useState(false);\n    const [taskName, setTaskName] = useState('');\n    const [taskDescription, setTaskDescription] = useState('');\n    const [updateDueDate, setUpdateDueDate] = useState('');\n    const [updatePriority, setUpdatePriority] = useState<RenderItem>();\n    const [checked, setChecked] = useState(false);\n    const [currentStorage, setCurrentStorage] = useState(Array<TODO_ITEM>());\n\n    const handleUpdateValue = () => {\n        const updatedStorage = currentStorage.map(item => {\n            if(item.id === id) {\n                return {\n                    id: id,\n                    taskName: taskName,\n                    taskDescription: taskDescription,\n                    dueDate: updateDueDate,\n                    priority: updatePriority\n                }\n            }\n            return item;\n        })\n        save(TODO_STORAGE, updatedStorage);     \n        setActive(false);\n        onUpdate('update');\n    }\n\n    const handleRemoveTodo = () => {\n        remove(TODO_STORAGE, id);\n        onUpdate('delete');\n    }\n\n    useEffect(() => {\n        setTaskName(label);\n        setTaskDescription(description);\n        setUpdateDueDate(dueDate);\n        setUpdatePriority(priority);\n\n        //get list todo\n        const tempStorage = get(TODO_STORAGE);\n        if (tempStorage) {\n            setCurrentStorage(tempStorage)\n        }\n    }, [])\n\n    return (\n        <div className=\"todoItem\">\n            <div className=\"briefContainer\">\n                <div className=\"leftContainer\">\n                    <input type=\"checkbox\" onChange={(e) => onChecked(id, e.target.checked)}/>\n                    <p>{label}</p>\n                </div>\n\n                <div className=\"actionContainer\">\n                    <Button className=\"detailBtn\" type=\"info\" label=\"Detail\" onClick={() => setActive(!active)} />\n                    <Button type=\"danger\" label=\"Remove\" onClick={() => handleRemoveTodo()}/>\n                </div>\n            </div>\n\n            {\n                active && <div className=\"detailContainer\">\n                    <Input value={taskName} placeholder=\"Task name ...\" className=\"addTaskInput\" onChange={(value) => setTaskName(value)} />\n\n                    <p className=\"label\">Description</p>\n                    <textarea value={taskDescription} rows={8} onChange={(e) => setTaskDescription(e.target.value)} />\n                    <div className=\"dropdownBox\">\n                        <div className=\"calendarBox\">\n                            <p className=\"label\">Due Date</p>\n                            <Calendar onChange={(e) => setUpdateDueDate(e.target.value)} value={updateDueDate} />\n                        </div>\n                        <div className=\"priorityBox\">\n                            <p className=\"label\">Priority</p>\n                            <Dropdown className=\"dropdownItem\" value={updatePriority!.value} data={PRIORITY_LIST} onChange={(value) => setUpdatePriority(value)} />\n                        </div>\n                    </div>\n                    <Button className=\"updateBtn\" label=\"Update\" onClick={() => handleUpdateValue()} />\n                </div>\n            }\n\n        </div>\n\n\n    );\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { Dropdown } from '../../components/dropdown/index'\nimport { Calendar } from '../../components/calendar/index'\nimport { Button } from '../../components/button/index'\nimport { Input } from '../../components/input/index'\nimport { Alert } from '../../components/alert/index'\nimport './style.scss';\nimport { PRIORITY, PRIORITY_LIST, TODO_STORAGE, TODO_ITEM } from '../../const'\nimport { save, get, removeBulk } from '../../services/storage'\nimport { TodoItem } from './todo-item';\nimport { v4 as uuidv4 } from 'uuid';\nimport { type } from 'os';\n\nexport const ListTodo = () => {\n    const [taskName, setTaskName] = useState('');\n    const [taskDescription, setTaskDescription] = useState('');\n    const [dueDate, setDueDate] = useState('');\n    const [priority, setPriority] = useState(PRIORITY.NORMAL);\n    const [searchValue, setSearchValue] = useState('');\n    const [currentStorage, setCurrentStorage] = useState(Array<TODO_ITEM>());\n    const [displayTodos, setDisplayTodos] = useState(Array<TODO_ITEM>());\n    const [selectedItem, setSelectedItem] = useState(Array<string>());\n    const [alertType, setAlertType] = useState<'update' | 'delete'>('update');\n    const [alertMessage, setAlertMessage] = useState('');\n    const [isShowAlert, setIsShowAlert] = useState(false);\n    const [isShowingBulkActions, setIsShowingBulkActions] = useState(false);\n\n    const handleAddTodo = () => {\n        const id = uuidv4();\n        const todoItem = { id, taskName, taskDescription, dueDate, priority };\n        save(TODO_STORAGE, [...currentStorage, todoItem]);\n        setCurrentStorage([...currentStorage, todoItem]);\n\n        setTaskName('');\n        setTaskDescription('');\n    }\n\n    const handleOnTodoUpdate = (type: string) => {\n        if (type === 'update') {\n            setAlertType('update');\n            setAlertMessage(\"Todo Updated :')\");\n        } else if (type === 'delete') {\n            setAlertType('delete');\n            setAlertMessage(\"Todo Removed :'(\");\n        }\n        getCurrentStorage();\n\n        setIsShowAlert(true);\n        setTimeout(() => {\n            setIsShowAlert(false);\n        }, 1500);\n    }\n\n    const handleOnCheckedTodo = (id: string, checked: boolean) => {\n        if(checked) {\n            setSelectedItem([...selectedItem, id]);\n        }else {\n            const filteredSeletedItem = selectedItem.filter(item => item !== id);\n            setSelectedItem(filteredSeletedItem);\n        }\n    }\n\n    useEffect(() => {\n        //check selected item list to show bulk action action bar\n        if(selectedItem.length > 0) {\n            setIsShowingBulkActions(true)\n        }else {\n            setIsShowingBulkActions(false)\n        }\n    })\n\n    useEffect(() => {\n\n        getCurrentStorage();\n\n        //set default due date\n        const date = new Date;\n        let year = date.getFullYear();\n        let month = date.getMonth();\n        let day = date.getDate();\n        let parsedMonth = '';\n        let parsedDate = '';\n\n        if (month < 10) {\n            parsedMonth = '0' + month;\n        } else {\n            parsedMonth = month + '';\n        }\n\n        if (day < 10) {\n            parsedDate = '0' + day;\n        } else {\n            parsedDate = day + '';\n        }\n\n        setDueDate(`${year}-${parsedMonth}-${parsedDate}`);\n    }, [])\n\n    useEffect(() => {\n        setDisplayTodos(currentStorage);\n    }, [currentStorage])\n\n    const getCurrentStorage = () => {\n        //get list todo\n        const tempStorage = get(TODO_STORAGE);\n        if (tempStorage) {\n            setCurrentStorage(tempStorage)\n        }\n    }\n\n    const handleSearchTodo = (value: string) => {\n        const searchValue = value.toLowerCase();\n        const filteredTodo = currentStorage.filter(item => item.taskName.toLowerCase().includes(searchValue) || item.taskDescription.toLowerCase().includes(searchValue));\n        setDisplayTodos(filteredTodo);\n    }\n\n    const handleBulkDone = () => {\n\n    }\n\n    const handleBulkDelete = () => {\n        removeBulk(TODO_STORAGE, selectedItem);\n        handleOnTodoUpdate('delete');\n        setSelectedItem([]);        \n    }\n\n    return (\n        <div className=\"mainContainer\">\n            <div className=\"createTodoContainer\">\n                <h1 className=\"title\">New Task</h1>\n\n                <Input placeholder=\"Add new task...\" className=\"addTaskInput\" onChange={(value) => setTaskName(value)} value={taskName} />\n\n                <p className=\"label\">Description</p>\n                <textarea rows={8} onChange={(e) => setTaskDescription(e.target.value)} value={taskDescription} />\n                <div className=\"dropdownBox\">\n                    <div className=\"calendarBox\">\n                        <p className=\"label\">Due Date</p>\n                        <Calendar onChange={(e) => setDueDate(e.target.value)} value={dueDate} />\n                    </div>\n                    <div className=\"priorityBox\">\n                        <p className=\"label\">Priority</p>\n                        <Dropdown className=\"dropdownItem\" value={priority.value} data={PRIORITY_LIST} onChange={(value) => setPriority(value)} />\n                    </div>\n                </div>\n                <Button className=\"addBtn\" label=\"Add\" onClick={() => handleAddTodo()} />\n            </div>\n\n            <div className=\"listTodoContainer\">\n                <div className=\"wrapper\">\n                    <h1 className=\"title\">List todo</h1>\n                    <Input placeholder=\"Search ...\" onChange={(value) => handleSearchTodo(value)} className=\"searchInput\" />\n                    {\n                        displayTodos && displayTodos.map(item => (\n                            <TodoItem onChecked={(id, checked) => handleOnCheckedTodo(id, checked)} onUpdate={(type: any) => handleOnTodoUpdate(type)} id={item.id} label={item.taskName} description={item.taskDescription} dueDate={item.dueDate} priority={item.priority} key={item.id} />\n                        ))\n                    }\n                </div>\n\n                {\n                    isShowingBulkActions && <div className=\"bulkAction\">\n                        <p>Bulk Action: </p>\n                        <div className=\"bulkActionContainer\">\n                            <Button className=\"doneBtn\" type=\"primary\" label=\"Done\" onClick={() => handleBulkDone()} />\n                            <Button type=\"danger\" label=\"Remove\" onClick={() => handleBulkDelete()} />\n                        </div>\n                    </div>\n                }\n\n            </div>\n\n            {isShowAlert && <Alert type={alertType} message={alertMessage} />}\n        </div>\n\n    );\n}\n\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport \"./index.scss\";\n\nimport { ListTodo } from './screens/list-todo/index';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" component={ListTodo} /> \n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n ","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}